#!/usr/bin/env python
PACKAGE = "mrs_uav_unreal_simulation"

import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

simulation = gen.add_group("Simulation");

simulation.add("realtime_factor", double_t, 0, "Realtime factor", 0.0, 0.01, 10.0)
simulation.add("paused", bool_t, 0, "Paused", False)

lidar = gen.add_group("LiDAR");

lidar.add("lidar_enabled", bool_t, 0, "LiDAR enabled", True)
lidar.add("lidar_rate", double_t, 0, "LiDAR rate", 0.0, 0.01, 20.0)
lidar.add("lidar_horizontal_fov", double_t, 0, "LiDAR horizontal fov", 360.0, 0.0, 360.0)
lidar.add("lidar_vertical_fov", double_t, 0, "LiDAR vertical fov", 45.0, 0.0, 180.0)
lidar.add("lidar_horizontal_rays", int_t, 0, "LiDAR horizontal rays", 256, 1, 360)
lidar.add("lidar_vertical_rays", int_t, 0, "LiDAR vertical rays", 32, 1, 64)
lidar.add("lidar_offset_x", double_t, 0, "LiDAR offset x", 0.0, -100.0, 100.0)
lidar.add("lidar_offset_y", double_t, 0, "LiDAR offset y", 0.0, -100.0, 100.0)
lidar.add("lidar_offset_z", double_t, 0, "LiDAR offset z", 6.0, -100.0, 100.0)
lidar.add("lidar_rotation_pitch", double_t, 0, "LiDAR rotation pitch", 0.0, 0.0, 360.0)
lidar.add("lidar_rotation_roll", double_t, 0, "LiDAR rotation roll", 90.0, 0.0, 360.0)
lidar.add("lidar_rotation_yaw", double_t, 0, "LiDAR rotation yaw", 0.0, 0.0, 360.0)
lidar.add("lidar_beam_length", double_t, 0, "LiDAR beam length", 1000.0, 0.0, 2000.0)

lidar_seg = gen.add_group("LiDAR Segmentation");

lidar_seg.add("lidar_seg_enabled", bool_t, 0, "LiDAR Segmentation enabled", True)
lidar_seg.add("lidar_seg_rate", double_t, 0, "LiDAR Segmentattion rate", 0.0, 0.01, 20.0)

rgb = gen.add_group("RGB");

rgb.add("rgb_enabled", bool_t, 0, "RGB enabled", False)
rgb.add("rgb_rate", double_t, 0, "RGB rate", 0.0, 0.01, 20.0)
rgb.add("rgb_width", int_t, 0, "RGB width", 640, 1, 1920)
rgb.add("rgb_height", int_t, 0, "RGB height", 480, 1, 1280)
rgb.add("rgb_fov", double_t, 0, "RGB fov", 90.0, 0.0, 180.0)
rgb.add("rgb_offset_x", double_t, 0, "RGB offset x", 14.9, -100.0, 100.0)
rgb.add("rgb_offset_y", double_t, 0, "RGB offset y", 0.0, -100.0, 100.0)
rgb.add("rgb_offset_z", double_t, 0, "RGB offset z", 0.0, -100.0, 100.0)
rgb.add("rgb_rotation_pitch", double_t, 0, "RGB rotation pitch", 0.0, 0.0, 360.0)
rgb.add("rgb_rotation_roll", double_t, 0, "RGB rotation roll", 0.0, 0.0, 360.0)
rgb.add("rgb_rotation_yaw", double_t, 0, "RGB rotation yaw", 0.0, 0.0, 360.0)

depth = gen.add_group("Depth");

depth.add("depth_enabled", bool_t, 0, "Depth enabled", True)
depth.add("depth_rate", double_t, 0, "Depth rate", 0.0, 0.01, 20.0)

seg = gen.add_group("Segmentation");

seg.add("seg_enabled", bool_t, 0, "Seg enabled", True)
seg.add("seg_rate", double_t, 0, "Seg rate", 0.0, 0.01, 20.0)

color_depth = gen.add_group("Color Depth");

color_depth.add("color_depth_enabled", bool_t, 0, "Color depth enabled", True)
color_depth.add("color_depth_rate", double_t, 0, "Color depth rate", 0.0, 0.01, 20.0)

color_depth_PC = gen.add_group("Color Depth PC");

color_depth_PC.add("color_depth_PC_enabled", bool_t, 0, "Color depth PC enabled", True)
color_depth_PC.add("color_depth_PC_rate", double_t, 0, "Color depth PC rate", 0.0, 0.01, 20.0)

exit(gen.generate(PACKAGE, "UnrealSimulator", "unreal_simulator"))

